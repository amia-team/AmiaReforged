// <auto-generated />
using System;
using System.Collections.Generic;
using AmiaReforged.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AmiaReforged.Core.Migrations
{
    [DbContext(typeof(AmiaContext))]
    [Migration("20221031024459_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AmiaReforged.Core.Ban", b =>
                {
                    b.Property<string>("CdKey")
                        .HasColumnType("text")
                        .HasColumnName("cd_key");

                    b.HasKey("CdKey");

                    b.HasIndex(new[] { "CdKey" }, "bans_cd_key_key")
                        .IsUnique();

                    b.ToTable("bans", (string)null);
                });

            modelBuilder.Entity("AmiaReforged.Core.Dm", b =>
                {
                    b.Property<string>("CdKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cd_key");

                    b.HasIndex(new[] { "CdKey" }, "dms_cd_key_key")
                        .IsUnique();

                    b.ToTable("dms", (string)null);
                });

            modelBuilder.Entity("AmiaReforged.Core.DmLogin", b =>
                {
                    b.Property<int>("LoginNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("login_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LoginNumber"));

                    b.Property<string>("CdKey")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cd_key");

                    b.Property<string>("LoginName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("login_name");

                    b.Property<DateTime?>("SessionEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("session_end");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("session_start");

                    b.HasKey("LoginNumber")
                        .HasName("dm_logins_pkey");

                    b.ToTable("dm_logins", (string)null);
                });

            modelBuilder.Entity("AmiaReforged.Core.DreamcoinRecord", b =>
                {
                    b.Property<string>("CdKey")
                        .HasColumnType("character varying")
                        .HasColumnName("cd_key");

                    b.Property<int?>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.HasKey("CdKey")
                        .HasName("dreamcoin_records_pkey");

                    b.ToTable("dreamcoin_records", (string)null);
                });

            modelBuilder.Entity("AmiaReforged.Core.Entities.AmiaCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CdKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPlayerCharacter")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("AmiaReforged.Core.Models.Faction", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<Guid>>("Members")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.HasKey("Name");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("AmiaReforged.Core.Player", b =>
                {
                    b.Property<string>("CdKey")
                        .HasColumnType("character varying")
                        .HasColumnName("cd_key");

                    b.HasKey("CdKey")
                        .HasName("players_pkey");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("AmiaReforged.Core.DreamcoinRecord", b =>
                {
                    b.HasOne("AmiaReforged.Core.Player", "CdKeyNavigation")
                        .WithOne("DreamcoinRecord")
                        .HasForeignKey("AmiaReforged.Core.DreamcoinRecord", "CdKey")
                        .IsRequired()
                        .HasConstraintName("dreamcoin_records_cd_key_fkey");

                    b.Navigation("CdKeyNavigation");
                });

            modelBuilder.Entity("AmiaReforged.Core.Player", b =>
                {
                    b.Navigation("DreamcoinRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
