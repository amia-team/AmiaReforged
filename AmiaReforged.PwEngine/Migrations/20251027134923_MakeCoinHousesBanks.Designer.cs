// <auto-generated />
using System;
using AmiaReforged.PwEngine.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AmiaReforged.PwEngine.Migrations
{
    [DbContext(typeof(PwEngineContext))]
    [Migration("20251027134923_MakeCoinHousesBanks")]
    partial class MakeCoinHousesBanks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.PersistentCharacterKnowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<string>("IndustryTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KnowledgeTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PersistentIndustryMembershipId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("PersistentIndustryMembershipId");

                    b.ToTable("CharacterKnowledge");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.PersistentIndustryMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<string>("IndustryTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("IndustryMemberships");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Shops.PlayerStall", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("AreaResRef")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GrossProfit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastPaidRentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StoredGold")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("PlayerStalls");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Shops.StallProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ItemData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("StallProducts");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Shops.StallTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BuyerName")
                        .HasColumnType("text");

                    b.Property<int>("PricePaid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("StallId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("StallOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StallId");

                    b.HasIndex("StallOwnerId");

                    b.ToTable("StallTransactions");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("EngineId")
                        .HasColumnType("uuid");

                    b.Property<int>("Settlement")
                        .HasColumnType("integer");

                    b.Property<int>("StoredGold")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CoinHouses");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("CoinHouseId")
                        .HasColumnType("bigint");

                    b.Property<int>("Credit")
                        .HasColumnType("integer");

                    b.Property<int>("Debit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoinHouseId");

                    b.ToTable("CoinHouseAccounts");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseAccountHolder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("HolderId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("CoinHouseAccountHolders");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CoinHouseAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid");

                    b.Property<int>("IssuerType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoinHouseAccountId");

                    b.ToTable("CoinHouseTransactions");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.PersistedCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CdKey")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersistedCharacter");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.PersistentCharacterTrait", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomData")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAcquired")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("TraitTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterTraits");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.PersistentObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Serialized")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PersistentObjects");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.PersistentResourceNodeInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefinitionTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<float>("Rotation")
                        .HasColumnType("real");

                    b.Property<int>("Uses")
                        .HasColumnType("integer");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.Property<float>("Z")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("PersistedNodes");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.PlayerHousing.House", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Settlement")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.SavedLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AreaResRef")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<float>("Orientation")
                        .HasColumnType("real");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.Property<float>("Z")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SavedLocation");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Storage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("EngineId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.StoredItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("ItemData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uuid");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseItems");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.WorldConfiguration", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("WorldConfiguration");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Features.WorldEngine.Characters.CharacterData.CharacterStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<int>("IndustriesJoined")
                        .HasColumnType("integer");

                    b.Property<int>("KnowledgePoints")
                        .HasColumnType("integer");

                    b.Property<int>("PlayTime")
                        .HasColumnType("integer");

                    b.Property<int>("TimesDied")
                        .HasColumnType("integer");

                    b.Property<int>("TimesRankedUp")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CharacterStatistics", (string)null);
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.PersistentCharacterKnowledge", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.PersistedCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.Economy.PersistentIndustryMembership", null)
                        .WithMany("Knowledge")
                        .HasForeignKey("PersistentIndustryMembershipId");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.PersistentIndustryMembership", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.PersistedCharacter", "Character")
                        .WithMany("Memberships")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Shops.PlayerStall", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Shops.StallProduct", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.Economy.Shops.PlayerStall", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Shops.StallTransaction", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.Economy.Shops.PlayerStall", "Stall")
                        .WithMany("Transactions")
                        .HasForeignKey("StallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseAccount", "StallOwner")
                        .WithMany()
                        .HasForeignKey("StallOwnerId");

                    b.Navigation("Stall");

                    b.Navigation("StallOwner");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseAccount", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouse", "CoinHouse")
                        .WithMany("Accounts")
                        .HasForeignKey("CoinHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinHouse");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseAccountHolder", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseAccount", "Account")
                        .WithMany("AccountHolders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseTransaction", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseAccount", "CoinHouseAccount")
                        .WithMany("Receipts")
                        .HasForeignKey("CoinHouseAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinHouseAccount");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.PersistentCharacterTrait", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.PersistedCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.PersistentObject", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.SavedLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.PlayerHousing.House", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.PersistedCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.StoredItem", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.Storage", "Warehouse")
                        .WithMany("Items")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Features.WorldEngine.Characters.CharacterData.CharacterStatistics", b =>
                {
                    b.HasOne("AmiaReforged.PwEngine.Database.Entities.PersistedCharacter", null)
                        .WithOne("Statistics")
                        .HasForeignKey("AmiaReforged.PwEngine.Features.WorldEngine.Characters.CharacterData.CharacterStatistics", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.PersistentIndustryMembership", b =>
                {
                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Shops.PlayerStall", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouse", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Economy.Treasuries.CoinHouseAccount", b =>
                {
                    b.Navigation("AccountHolders");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.PersistedCharacter", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("AmiaReforged.PwEngine.Database.Entities.Storage", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
