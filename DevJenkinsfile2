pipeline{
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
                 script {
                    sh "sudo chown -R jenkins.jenkins /var/lib/jenkins/workspace/"
                    sh 'sudo chmod +x stop-dev2.sh'
                    sh 'bash stop-dev2.sh'
                }
            }
        }
        stage('Deploy') {
            when {
                    expression {
                        return params.DeployAll == true
                    }
            }
            steps {
                echo 'Deploying....'
                   
                sh 'sudo dotnet publish AmiaReforged.Core --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.Core/'
                sh 'sudo dotnet publish AmiaReforged.System --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.System/'
                sh 'sudo dotnet publish AmiaReforged.Classes --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.Classes/'
                sh 'sudo dotnet publish AmiaReforged.Races --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.Races/'
                sh 'sudo dotnet publish AmiaReforged.DMS --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.DMS/'
                sh 'sudo dotnet publish AmiaReforged.PwEngine --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.PwEngine/'
            }
        }
        stage('Deploy Core') {
            when {
                    expression {
                        return params.DeployCore == true && params.DeployAll == false
                    }
            }
            steps {
                echo 'Deploying....'
                   
                sh 'sudo dotnet publish AmiaReforged.Core --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.Core/'
            }
        }
        stage('Deploy System') {
			when {
					expression {
						return params.DeploySystem == true && params.DeployAll == false
					}
			}
			steps {
				echo 'Deploying....'
				   
				sh 'sudo dotnet publish AmiaReforged.System --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.System/'
			}
		}
        stage('Deploy Classes') {
            when {
                    expression {
                        return params.DeployClasses == true && params.DeployAll == false
                    }
            }
            steps {
                echo 'Deploying....'
                   
                sh 'sudo dotnet publish AmiaReforged.Classes --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.Classes/'
            }
        }
        stage('Deploy Races') {
            when {
                    expression {
                        return params.DeployRaces == true && params.DeployAll == false
                    }
            }
            steps {
                echo 'Deploying....'
                   
                sh 'sudo dotnet publish AmiaReforged.Races --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.Races/'
            }
        }
        stage('Deploy DMS') {
            when {
                    expression {
                        return params.DeployDms == true && params.DeployAll == false
                    }
            }
            steps {
                echo 'Deploying....'
                   
                sh 'sudo dotnet publish AmiaReforged.DMS --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.DMS/'
            }
        }
        stage('Deploy PwEngine') {
            when {
                    expression {
                        return params.DeployPwEngine == true && params.DeployAll == false
                    }
            }
            steps {
                echo 'Deploying....'
                
                sh 'sudo dotnet publish AmiaReforged.PwEngine --output /home/amia/dev_server/server2/anvil/Plugins/AmiaReforged.PwEngine/'
            }
        }            
    }
    post {
        always {
            discordSend description: "Builder for plugin AmiaReforged Dev Server 2 finished.", footer: "Build results for AmiaReforged (DEV)", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: params.webhookURL
            sh "sudo chown -R jenkins.jenkins /var/lib/jenkins/workspace/"
            sh 'sudo chmod +x start-dev2.sh'
            sh 'bash start-dev2.sh'
        }
        success {
            echo 'Build success'
        }
    }
}