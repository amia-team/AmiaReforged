pipeline {
    agent any

    parameters {
        string(name: 'webhookURL', defaultValue: '', description: 'Discord webhook URL')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }

        stage('Check for Changes') {
            steps {
                script {
                    // Get list of changed files
                    def changes = sh(
                        script: 'git diff --name-only HEAD~1 HEAD || echo "FIRST_BUILD"',
                        returnStdout: true
                    ).trim()

                    echo "Changed files:\n${changes}"

                    // Check if WorldSimulator or WorldSimulator.Tests were modified
                    def hasSimulatorChanges = changes.contains('WorldSimulator/') ||
                                             changes.contains('WorldSimulator.Tests/') ||
                                             changes == 'FIRST_BUILD'

                    if (!hasSimulatorChanges) {
                        echo 'No changes detected in WorldSimulator or WorldSimulator.Tests - skipping build'
                        currentBuild.result = 'NOT_BUILT'
                        error('No relevant changes - pipeline stopped')
                    } else {
                        echo 'Changes detected in WorldSimulator projects - proceeding with build'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building WorldSimulator and tests...'
                sh 'dotnet build WorldSimulator/WorldSimulator.csproj --configuration Release'
                sh 'dotnet build WorldSimulator.Tests/WorldSimulator.Tests.csproj --configuration Release'
            }
        }

        stage('Test') {
            steps {
                script {
                    echo 'Running WorldSimulator tests...'
                    def testResult = sh(
                        script: '''
                            dotnet test WorldSimulator.Tests/WorldSimulator.Tests.csproj \
                              --configuration Release \
                              --no-build \
                              --logger "trx;LogFileName=test-results.trx" \
                              --collect:"XPlat Code Coverage" \
                              --verbosity normal
                        ''',
                        returnStatus: true
                    )

                    if (testResult != 0) {
                        echo "Tests failed with exit code ${testResult}"
                        currentBuild.result = 'UNSTABLE'
                    } else {
                        echo 'All tests passed!'
                    }
                }
            }
        }

        stage('Publish Test Results') {
            steps {
                script {
                    // Publish HTML coverage report
                    try {
                        echo 'Publishing code coverage report...'
                        publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'WorldSimulator.Tests/TestResults',
                            reportFiles: 'index.html',
                            reportName: 'Code Coverage Report'
                        ])
                    } catch (Exception e) {
                        echo "Warning: Could not publish coverage report: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Only send Discord notification if build actually ran
                if (currentBuild.result != 'NOT_BUILT') {
                    // Get test results summary
                    def testSummary = ""
                    try {
                        def testResults = junit allowEmptyResults: true, testResults: 'WorldSimulator.Tests/**/test-results.trx'
                        if (testResults) {
                            def total = testResults.totalCount
                            def passed = testResults.passCount
                            def failed = testResults.failCount
                            def skipped = testResults.skipCount

                            testSummary = "\n\n**Test Results:**\n‚úÖ Passed: ${passed}\n‚ùå Failed: ${failed}\n‚è≠Ô∏è Skipped: ${skipped}\nüìä Total: ${total}"
                        }
                    } catch (Exception e) {
                        echo "Could not get test summary: ${e.message}"
                        testSummary = "\n\n‚ö†Ô∏è Test results unavailable"
                    }

                    discordSend description: "WorldSimulator build #${BUILD_NUMBER} finished.${testSummary}", footer: "Build results for WorldSimulator", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: params.webhookURL
                } else {
                    echo 'Build skipped - no changes in WorldSimulator projects'
                }
            }
        }

        success {
            echo 'Build successful!'
        }

        failure {
            script {
                if (currentBuild.result != 'NOT_BUILT') {
                    echo 'Build failed due to test failures!'
                }
            }
        }
    }
}

