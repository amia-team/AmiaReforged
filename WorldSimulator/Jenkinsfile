pipeline {
    agent any

    parameters {
        string(name: 'webhookURL', defaultValue: '', description: 'Discord webhook URL')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }

        stage('Check for Changes') {
            steps {
                script {
                    // Get list of changed files
                    def changes = sh(
                        script: 'git diff --name-only HEAD~1 HEAD || echo "FIRST_BUILD"',
                        returnStdout: true
                    ).trim()

                    echo "Changed files:\n${changes}"

                    // Check if WorldSimulator or WorldSimulator.Tests were modified
                    def hasSimulatorChanges = changes.contains('WorldSimulator/') ||
                                             changes.contains('WorldSimulator.Tests/') ||
                                             changes == 'FIRST_BUILD'

                    if (!hasSimulatorChanges) {
                        echo 'No changes detected in WorldSimulator or WorldSimulator.Tests - skipping build'
                        currentBuild.result = 'NOT_BUILT'
                        error('No relevant changes - pipeline stopped')
                    } else {
                        echo 'Changes detected in WorldSimulator projects - proceeding with build'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building WorldSimulator and tests...'
                sh 'dotnet build WorldSimulator/WorldSimulator.csproj --configuration Release'
                sh 'dotnet build WorldSimulator.Tests/WorldSimulator.Tests.csproj --configuration Release'
            }
        }

        stage('Test') {
            steps {
                echo 'Running WorldSimulator tests...'
                sh '''
                    dotnet test WorldSimulator.Tests/WorldSimulator.Tests.csproj \
                      --configuration Release \
                      --no-build \
                      --logger "trx;LogFileName=test-results.trx" \
                      --collect:"XPlat Code Coverage" \
                      --verbosity normal \
                      || exit 1
                '''
            }
        }

        stage('Publish Test Results') {
            when {
                always()
            }
            steps {
                echo 'Publishing test results...'
                junit 'WorldSimulator.Tests/**/test-results.trx'
                publishHTML([
                    reportDir: 'WorldSimulator.Tests/TestResults',
                    reportFiles: 'index.html',
                    reportName: 'Code Coverage Report'
                ])
            }
        }
    }

    post {
        always {
            script {
                // Only send Discord notification if build actually ran
                if (currentBuild.result != 'NOT_BUILT') {
                    discordSend(
                        description: "WorldSimulator build #${BUILD_NUMBER} finished.",
                        footer: "Build results for WorldSimulator",
                        link: env.BUILD_URL,
                        result: currentBuild.currentResult,
                        title: "${JOB_NAME}",
                        webhookUrl: params.webhookURL
                    )
                } else {
                    echo 'Build skipped - no changes in WorldSimulator projects'
                }
            }
        }

        success {
            echo 'Build successful!'
        }

        failure {
            script {
                if (currentBuild.result != 'NOT_BUILT') {
                    echo 'Build failed due to test failures!'
                }
            }
        }
    }
}

